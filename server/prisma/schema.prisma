// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ERole {
  SUPERADMIN
  ADMIN
  OPERATOR
  VIEWER

  @@map("role_enum")
}

enum EUserStatus {
  INVITED
  ACTIVE

  @@map("user_status_enum")
}

enum EHandlerType {
  NONFUNCTIONAL
  FUNCTIONAL
  COMPONENT
  MODELRESPONSE

  @@map("handler_type_enum")
}

model User {
  id         String       @id @default(uuid()) @map("user_id")
  email      String       @unique @map("user_email")
  name       String?      @map("user_name")
  openid     String?      @map("open_id")
  role       ERole        @default(OPERATOR) @map("role_name")
  status     EUserStatus  @default(ACTIVE) @map("user_status")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @default(now()) @map("updated_at")

  userBots   Bot[]

  @@unique(fields: [email, openid], name: "user_email_openid")
  @@map("users")
}

model Bot {
  id                    String       @id @default(uuid()) @map("bot_id")
  name                  String       @map("bot_name")
  strictIntentDetection Boolean      @default(false) @map("strict_intent_detection")
  greetingMessage       String       @map("greeting_message")
  guidelines            String?      @db.Text @map("bot_guidelines")
  allowedOrigin         String[]     @default([]) @map("bot_allowed_origin")
  userId                String       @map("user_id")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @default(now()) @map("updated_at")

  userBot           User         @relation(fields: [userId], references: [id])
  botIntents        Intent[]
  botQuickActions   QuickAction?

  @@unique(fields: [name, userId], name: "user_bot")
  @@map("bots")
}

model Intent {
  id              String       @id @default(uuid()) @map("intent_id")
  name            String       @map("intent_name")
  botId           String       @map("bot_id")
  requiredFields  String?      @map("intent_required_fields")
  isEnabled       Boolean      @default(true) @map("is_enabled")

  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @default(now()) @map("updated_at")

  botIntent       Bot          @relation(fields: [botId], references: [id])
  intentHandler   IntentHandler?

  @@unique(fields: [name, botId], name: "bot_intent")
  @@map("intents")
}

model IntentHandler {
  id               String       @id @default(uuid()) @map("intent_handler_id")
  type             EHandlerType @map("intent_handler_type")
  content          String?      @db.Text @map("intent_handler_content")
  guidelines       String?      @db.Text @map("intent_handler_guidelines")
  intentId         String       @unique @map("intent_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @map("updated_at")

  intentHandler    Intent       @relation(fields: [intentId], references: [id])

  @@map("intent_handlers")
}

model QuickAction {
  id               String       @id @default(uuid()) @map("quick_action_id")
  config           String       @db.Text @map("config")
  botId            String       @unique @map("bot_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @default(now()) @map("updated_at")

  botQuickActions  Bot          @relation(fields: [botId], references: [id])

  @@map("quick_actions")
}